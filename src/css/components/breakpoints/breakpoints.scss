/* font properties */
// headings
$lghead: 2.887rem;
$head-1: 2.566rem; // 38.49px
$head-2: 2.281rem; // 34.21px
$head-3: 2.027rem; // 30.41px
$head-4: 1.802rem; // 27.03px
$head-5: 1.602rem; // 24.03px
$head-6: 1.424rem; // 21.36px
$body-2: 1.125rem; // 16.88px
$body: 1rem; // 15.00px
$caption: 0.889rem; // 13.33px
$caption-2: 0.79rem; //11.85px

$rg: 400;
$md: 500;
$sb: 600;
$bd: 700;
$xb: 800;
$hv: 900;

$sk-modernist: "SK Modernist";
$sk-modernist-mono: "SK Modernist Mono";

/* color properties */
$light: white;
$dark: #090909;
$dark-100: #050505;
$gray: rgb(200, 200, 200);

/* responsive properties */
$breakpoints: (
  xxs-min: 0px,
  xxs-max: 359.98px,
  xs-min: 360px,
  xs-max: 575.98px,
  sm-min: 576px,
  sm-max: 767.98px,
  md-min: 768px,
  md-max: 991.98px,
  lg-min: 992px,
  lg-max: 1199.98px,
  xl-min: 1200px,
  xl-max: 1399.98px,
  xxl-min: 1400px,
) !default;

// media of at least the min breakpoint width
@mixin media-min($lower) {
  @if map-keys($breakpoints) {
    $min: map-get($breakpoints, $lower);
    @if $min {
      @media (min-width: $min) {
        @content;
      }
    } @else {
      @content;
    }
  }
}

// media of at most the maximum breakpoint width
@mixin media-max($upper) {
  @if map-keys($breakpoints) {
    $max: map-get($breakpoints, $upper);
    @if $max {
      @media (max-width: $max) {
        @content;
      }
    } @else {
      @content;
    }
  }
}

// media that spans multiple breakpoint widths
@mixin media-btw($lower, $upper) {
  @if map-keys($breakpoints) {
    $min: map-get($breakpoints, $lower);
    $max: map-get($breakpoints, $upper);
    @if $min != null and $max != null {
      @media (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else if $max == null {
      @include media-min($lower) {
        @content;
      }
    } @else if $min == null {
      @include media-max($upper) {
        @content;
      }
    }
  }
}

$expressions: (
  fine: (
    pointer: fine,
  ),
  coarse: (
    pointer: coarse,
  ),
  landscape: (
    orientation: landscape,
  ),
  portrait: (
    orientation: portrait,
  ),
);

// media that spans screen texture and orientation
@mixin media-exp($texture) {
  @if map-keys($expressions) {
    $val: map-get($expressions, $texture);
    @if $val {
      @media #{inspect($val)} {
        @content;
      }
    }
  }
}
